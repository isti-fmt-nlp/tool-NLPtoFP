/**
 * 
 * @author Daniele Cicciarella
 *
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import main.CMTConstants;
import main.FDEXMLHandler;

public class ControllerProject implements ActionListener, WindowListener, MouseListener{
	
	/** variable used to activate prints in the code*/
	private static boolean verbose=false;

	private ViewProject viewProject = null;
	
	private ModelProject modelProject = null;
	
	/** 
	 * Constructor
	 * 
	 * @param viewProject - the view of this project
	 * @param modelProject - the model of this project 
	 */
	public ControllerProject(ViewProject viewProject, ModelProject modelProject){
		this.viewProject = viewProject;
		this.modelProject = modelProject;
	}
	
	/** 
	 * Handles events generated by JMenuBar, JButtons and JPopupMenus
	 * 
	 */
	@Override
	public void actionPerformed(ActionEvent ae){
	  if(ae.getActionCommand().equals("Create Project")){
		String s = null;			
		if((s = viewProject.assignNameProjectDialog()) != null){
		  if(!modelProject.createProject(s))
			  viewProject.errorDialog("Project already exists");
		  else{

			/* ***VERBOSE****/
			if (verbose) System.out.println("apro il LateralPanel con s="+s);
			/* ***VERBOSE****/

			viewProject.loadPanelLateral(s, null, this, true);
		  }
		}
	  }	
	  else if(ae.getActionCommand().equals("Delete Project")){
		if(viewProject.deleteProjectDialog() == 1){
			modelProject.deleteProject();
			viewProject.resetView();
		}
	  }
	  else if(ae.getActionCommand().equals("Load Project")){
		String s = null;
		ArrayList<String> al = null;
		
		if((s = viewProject.loadProjectDialog()) != null){
			al=modelProject.loadProject(s);
			if(al==null){ viewProject.errorDialog("Error during load"); return;}		
			else viewProject.loadPanelLateral(s.substring(0, s.length() - 4), al, this, false);	
		}
	  }
	  else if(ae.getActionCommand().equals("Save Project")){
		  modelProject.saveProject();
	  }
	  else if(ae.getActionCommand().equals("Load File")){
			String [] s = null;
			
			if((s = viewProject.loadFileDialog()) != null)
				modelProject.addFileProject(s[1]);
			
	  }
	  else if(ae.getActionCommand().equals("Load Analisys Folder")){
			String [] s = null;
			
			if((s = viewProject.loadFolderDialog()) != null){
			  
			  /* ***DEBUG*** */
			  if(verbose) for(String file : s) System.out.println("file: "+file);
			  /* ***DEBUG*** */

			  modelProject.addAnalisysFolderProject(s);				
			}

	  }
	  else if(ae.getActionCommand().equals("Delete Selected File")){
			int i = -1;
			
			if((i = viewProject.deleteSelectedFileDialog()) != -1)
				modelProject.removeFileProject(i);
	  }
	  else if(ae.getActionCommand().equals("Delete File")){
			int i = -1;
			
			if((i = viewProject.deleteFileDialog()) != -1){

				/* ***VERBOSE *** */
				if(verbose) System.out.println("Ho ricevuto i="+i);
				/* ***VERBOSE *** */

				modelProject.removeFileProject(i);
			}
	  }
	  else if(ae.getActionCommand().equals("Extract Commonalities")){
		  if(viewProject.extractCommonalitiesDialog() == 1){
			  viewProject.startThrobber();
			  modelProject.analyzesFileProject();
		  }
	  }
	  else if(ae.getActionCommand().equals("Extract Variabilities")){
		  if(viewProject.extractVariabilitiesDialog() == 1){
			  viewProject.startThrobber();
			  modelProject.extractVariabilities();
		  }
	  }
	  else if(ae.getActionCommand().equals("Select Commonalities")){
			viewProject.showFeaturesSelected(ViewPanelCentral.FeatureType.COMMONALITIES);
	  }
	  else if(ae.getActionCommand().equals("Select Variabilities")){
			viewProject.showFeaturesSelected(ViewPanelCentral.FeatureType.VARIABILITIES);
	  }
	  else if(ae.getActionCommand().equals("Create Diagram")){
		//creating model
		EditorModel editorModel= new EditorModel();

		//creating view
		EditorView editorView= new EditorView(
						modelProject.readCommonalitiesSelected(), 
						modelProject.readVariabilitiesSelected(), 
						modelProject.getTermsColor(), 
						modelProject.getRelevantTerms(),
						modelProject.getRelevantTermsVersions());

		//creating controller
		EditorController editorController =new EditorController(editorView, editorModel);
		
		//setting diagrams save path
		String[] strArr=modelProject.getPathProject().split("/");
//		String projectName=strArr[strArr.length-1];
//		String diagramsSavePath=modelProject.getPathProject();
//		diagramsSavePath=diagramsSavePath.substring(0, diagramsSavePath.length()-projectName.length())
//		  +diagramRelativePath+"/"+projectName;
		
//		editorController.setSavePath(modelProject.getPathProject()+diagramPath);
//		editorController.setSavePath(diagramsSavePath);
		
		editorController.setSavePath(strArr[strArr.length-1]);
		
		//adding the view as observer to the model
		editorModel.addObserver(editorView);

		//setting default close operation for the editor frame
		editorView.setOnCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		if(!editorView.prepareUI(editorController) ){
		  System.out.println("Controller not set. Closing...");
		  return;
		}
		
  		//creating view from model
		editorController.addStartingfeatures();
	  }
	  else if(ae.getActionCommand().equals("Open Diagram")){
		EditorModel editorModel=null;
		String projectName=null;		
  		SAXParser saxParser = null;
  		InputStream stream = null;
  		SAXParserFactory saxFactory = SAXParserFactory.newInstance();
  		FDEXMLHandler xmlHandler = new FDEXMLHandler();  		

  		//loading diagram save file
		String s = null;
		if((s = viewProject.loadDiagramDialog(CMTConstants.saveDiagramDir)) != null) try{
		  stream=new FileInputStream(s);
		  saxParser = saxFactory.newSAXParser();
		  saxParser.parse(stream, xmlHandler);  			  			
		}catch (Exception e) {
		  viewProject.errorDialog("Error while reading save file");
		  e.printStackTrace();
		  return;
		}
		else return;
		  
		//creating model
		try{
	  	  editorModel= EditorModel.loadSavedModel2(xmlHandler);
		}catch(Exception e){
		  e.printStackTrace();
		  viewProject.errorDialog("Error while loading model.");
		  return;
		}

		//creating an empty view
		EditorView editorView= new EditorView();

		//creating controller
		EditorController editorController =new EditorController(editorView, editorModel);

		//setting diagrams save path
		editorController.setSavePath(projectName);

		//adding the view as observer to the model
		editorModel.addObserver(editorView);
		
		//setting default close operation for the editor frame
		editorView.setOnCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		if( !editorView.prepareUI(editorController) ){
		  System.out.println("Controller not set. Closing...");
		  return;
		}

		//loading saved view data
		try{
	  	  editorView.loadSavedDiagram2(xmlHandler);
		}catch(Exception e){
		  e.printStackTrace();
		  viewProject.errorDialog("Error while loading diagram.");
		  return;
		}
	  }
	  else if(ae.getActionCommand().equals("Exit")){
		if(modelProject.readStateProject()[1]){
		  if(viewProject.saveProjectDialog() == 0){
			if(modelProject.readStateProject()[0]) modelProject.deleteProject();
		  }
		  else modelProject.saveProject();
		}
		viewProject.closeProject();
	  }
	  else System.out.println("Unknown action: "+ae.getActionCommand());
	}
	
	/** Gestisce gli eventi generati dal mouse
	 * 
	 */
	@Override
	public void mouseClicked(MouseEvent me)
	{
		if(me.getClickCount() == 2)
			viewProject.loadPanelCentral();
	}

	/** 
	 * Asks the use if the project must be saved before closing the application.
	 */
	@Override
	public void windowClosing(WindowEvent we){
		if(modelProject.readStateProject()[1]){
			if(viewProject.saveProjectDialog() == 0){
			  if(modelProject.readStateProject()[0])
				modelProject.deleteProject();
			}
			else modelProject.saveProject();
		}
		viewProject.closeProject();
	}
	
	@Override
	public void windowActivated(WindowEvent arg0) 
	{}
	
	@Override
	public void windowClosed(WindowEvent arg0) 
	{}

	@Override
	public void windowDeactivated(WindowEvent arg0) 
	{}

	@Override
	public void windowDeiconified(WindowEvent arg0) 
	{}

	@Override
	public void windowIconified(WindowEvent arg0) 
	{}

	@Override
	public void windowOpened(WindowEvent arg0) 
	{}

	@Override
	public void mouseEntered(MouseEvent arg0) 
	{}

	@Override
	public void mouseExited(MouseEvent arg0) 
	{}

	@Override
	public void mousePressed(MouseEvent arg0) 
	{}

	@Override
	public void mouseReleased(MouseEvent arg0) 
	{}
}

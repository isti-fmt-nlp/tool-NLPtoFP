/**
 * @author Manuel Musetti, Daniele Cicciarella
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import main.CMTConstants;
import main.FDEXMLHandler;
import main.OSUtils;
import main.TrayUtils;

public class ControllerProject implements ActionListener, WindowListener, MouseListener{
	
	/** variable used to activate prints in the code*/
	private static boolean verbose=false;

	private ViewProject viewProject = null;
	
	private ModelProject modelProject = null;
	
	/** Default name for a project, used before project creation*/
	public static final String DEFAULT_PROJECT_NAME="---";
	
	/** Name of the current project */
	private String projectName = "---";	
	
	/** 
	 * Constructor
	 * 
	 * @param viewProject - the view of this project
	 * @param modelProject - the model of this project 
	 */
	public ControllerProject(ViewProject viewProject, ModelProject modelProject){
		this.viewProject = viewProject;
		this.modelProject = modelProject;
	}
	
	/** 
	 * Handles events generated by JMenuBar, JButtons and JPopupMenus
	 */
	@Override
	public void actionPerformed(ActionEvent ae){
	  if(ae.getActionCommand().equals("Create Project")){
		String s = null;			
		if((s = viewProject.assignNameProjectDialog()) != null){
		  if(!modelProject.createProject(s))
			  viewProject.errorDialog("Project already exists");
		  else{

			/* ***VERBOSE****/
			if (verbose) System.out.println("apro il LateralPanel con s="+s);
			/* ***VERBOSE****/

			viewProject.loadPanelLateral(s, null, this, true);
			
			//setting project's name and tray
			setProjectNameAndTray(s);
		  }
		}
	  }	
	  else if(ae.getActionCommand().equals("Delete Project")){
		if(viewProject.deleteProjectDialog() == 1){
			modelProject.deleteProject();
			viewProject.resetView();//createProject

			//setting project's name and tray
			setProjectNameAndTray(DEFAULT_PROJECT_NAME);
		}
	  }
	  else if(ae.getActionCommand().equals("Load Project")){
		String s = null;
		String projectName=null;
		ArrayList<String> al = null;
		
		if((s = viewProject.loadProjectDialog()) != null){
			al=modelProject.loadProject(s);
			if(al==null){ viewProject.errorDialog("Error during load"); return;}		
			else{
			  projectName=s.substring(s.lastIndexOf(OSUtils.getFilePathSeparator())+1, s.length()-4);
			  viewProject.loadPanelLateral(projectName, al, this, false);	

			  //setting project's name and tray
//			  setProjectNameAndTray(s.substring(0, s.length()-4));
			  setProjectNameAndTray(projectName);
			  
//			  modelProject.printUncoloredTerms();
			}
		}
	  }
	  else if(ae.getActionCommand().equals("Save Project")){
		  modelProject.saveProject();
	  }
	  else if(ae.getActionCommand().equals("Load File")){
			String [] s = null;
			
			if((s = viewProject.loadFileDialog()) != null)
				modelProject.addFileProject(s[1]);
			
	  }
	  else if(ae.getActionCommand().equals("Load Analysis Folder")){
			String [] s = null;
			
			if((s = viewProject.loadFolderDialog()) != null){
			  
			  /* ***DEBUG*** */
			  if(verbose) for(String file : s) System.out.println("file: "+file);
			  /* ***DEBUG*** */

			  modelProject.addAnalisysFolderProject(s);				
			}

	  }else if(ae.getActionCommand().equals("Load2 File")){
			String [] s = null;
			
			if((s = viewProject.loadFile()) != null){
			  
			  /* ***DEBUG*** */
			  if(verbose) for(String file : s) System.out.println("file: "+file);
			  /* ***DEBUG*** */

			  modelProject.addAnalisysFolderProject(s);				
			}

	  }
	  else if(ae.getActionCommand().equals("Delete Selected File")){
			int i = -1;
			
			if((i = viewProject.deleteSelectedFileDialog()) != -1)
				modelProject.removeFileProject(i);
	  }
	  else if(ae.getActionCommand().equals("Delete File")){
			int i = -1;
			
			if((i = viewProject.deleteFileDialog()) != -1){

				/* ***VERBOSE *** */
				if(verbose) System.out.println("Ho ricevuto i="+i);
				/* ***VERBOSE *** */

				modelProject.removeFileProject(i);
			}
	  }
	  else if(ae.getActionCommand().equals("Extract Commonalities")){
		  if(viewProject.extractCommonalitiesDialog() == 1){
			  viewProject.startThrobber();
			  modelProject.analyzesFileProject();
		  }
	  }
	  else if(ae.getActionCommand().equals("Extract Variabilities")){
		  if(viewProject.extractVariabilitiesDialog() == 1){
			  viewProject.startThrobber();
			  modelProject.extractVariabilities();
		  }
	  }
	  else if(ae.getActionCommand().equals("Select Commonalities")){
			viewProject.showFeaturesSelected(ViewPanelCentral.FeatureType.COMMONALITIES);
	  }
	  else if(ae.getActionCommand().equals("Select Variabilities")){
			viewProject.showFeaturesSelected(ViewPanelCentral.FeatureType.VARIABILITIES);
	  }
	  else if(ae.getActionCommand().equals("Create Diagram")){
		String filePathSeparator=null;
		//creating model
		EditorModel editorModel= new EditorModel();

		//creating view
		EditorView editorView= new EditorView(
						modelProject.readCommonalitiesSelected(), 
						modelProject.readVariabilitiesSelected(), 
						modelProject.getTermsColor(), 
						modelProject.getRelevantTerms(),
						modelProject.getRelevantTermsVersions());

		//creating controller
		EditorController editorController =new EditorController(editorView, editorModel);
		
		filePathSeparator=OSUtils.getFilePathSeparator();
		if (filePathSeparator.compareTo("\\")==0) filePathSeparator="\\";
		//setting diagrams save path
//		String[] strArr=modelProject.getPathProject().split(OSUtils.getFilePathSeparator());
		
//		editorController.setSavePath(strArr[strArr.length-1]);
		String tmpmp=modelProject.getPathProject();
		editorController.setSavePath(tmpmp.substring(tmpmp.lastIndexOf(filePathSeparator)+1, tmpmp.length()));
		
  		//setting diagram's name and FDE tray
		String newDiagramName=editorController.fetchUniqueNameForNewDiagram();
		System.out.println("*****newDiagramName= "+newDiagramName);
		editorController.setDiagramNameAndTray(newDiagramName, false);
		
		//adding the view as observer to the model
		editorModel.addObserver(editorView);

		//setting default close operation for the editor frame
		editorView.setOnCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		if(!editorView.prepareUI(editorController) ){
		  System.out.println("Controller not set. Closing...");
		  return;
		}
		
  		//creating view from model
		editorController.addStartingfeatures();
		editorView.requestFocus();
	  }
	  else if(ae.getActionCommand().equals("Open Diagram")){
		EditorModel editorModel=null;
		String projectName=null;		
  		SAXParser saxParser = null;
  		InputStream stream = null;
  		SAXParserFactory saxFactory = SAXParserFactory.newInstance();
  		FDEXMLHandler xmlHandler = new FDEXMLHandler();  		
  		String diagramName = null;
  		//loading diagram save file
		String s = null;
		if((s = viewProject.loadDiagramDialog(CMTConstants.getSaveDiagramDir())) != null) try{

		  diagramName = s.substring(s.lastIndexOf(OSUtils.getFilePathSeparator())+1, s.length());

		  projectName=s.substring(0, s.lastIndexOf(OSUtils.getFilePathSeparator()));
  		  projectName=projectName.substring(projectName.lastIndexOf(OSUtils.getFilePathSeparator())+1, projectName.length());

		  if(s.endsWith(".xml")) diagramName = diagramName.substring(0, diagramName.length()-4);			
			 	
		  //if the selected diagram is already loaded, its instance is just brought to front
		  if(TrayUtils.isFDEInstancePresent(diagramName)){
			TrayUtils.bringToFrontFDEInstance(diagramName);
			return;  			
		  }			
			
		  stream=new FileInputStream(s);
		  saxParser = saxFactory.newSAXParser();
		  saxParser.parse(stream, xmlHandler);  			  			
		}catch (Exception e) {
		  viewProject.errorDialog("Error while reading save file");
		  e.printStackTrace();
		  return;
		}
		else return;
		  
		//creating model
		try{
	  	  editorModel= EditorModel.loadSavedModel2(xmlHandler);
		}catch(Exception e){
		  e.printStackTrace();
		  viewProject.errorDialog("Error while loading model.");
		  return;
		}

		//creating an empty view
		EditorView editorView= new EditorView();

		//creating controller
		EditorController editorController =new EditorController(editorView, editorModel);

		//setting diagrams save path
		editorController.setSavePath(projectName);

  		//setting diagram's name and FDE tray		
		editorController.setDiagramNameAndTray(diagramName, true);

		//adding the view as observer to the model
		editorModel.addObserver(editorView);
		
		//setting default close operation for the editor frame
		editorView.setOnCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		if( !editorView.prepareUI(editorController) ){
		  System.out.println("Controller not set. Closing...");
		  return;
		}

		//loading saved view data
		try{
	  	  editorView.loadSavedDiagram2(xmlHandler);
		}catch(Exception e){
		  e.printStackTrace();
		  viewProject.errorDialog("Error while loading diagram.");
		  return;
		}

		editorView.requestFocus();
	  }
	  else if(ae.getActionCommand().equals("Exit")){
		closeToolInstance();
	  }
	  //Tray command: To Front
      else if(ae.getActionCommand().equals("To Front")){
      	bringToFront();
      }
	  //Tray command: Maximize
      else if(ae.getActionCommand().equals("Maximize")){    	
    	viewProject.maximize();
      }
	  //Tray command: Minimize
      else if(ae.getActionCommand().equals("Minimize")){
    	viewProject.minimize();
      }
	  else System.out.println("Unknown action: "+ae.getActionCommand());
	}

	/**
	 * Closes this tool instance.
	 */
	public void closeToolInstance() {
		TrayUtils.tryCloseAllFDEInstance();
		if(modelProject.readStateProject()[1]){
		  if(viewProject.saveProjectDialog() == 0){
			if(modelProject.readStateProject()[0]) modelProject.deleteProject();
		  }
		  else modelProject.saveProject();
		}      	
		
		//removing instance from tray and closing it
		TrayUtils.removeInstanceCMT(projectName);
		viewProject.closeProject();
	}
	
	/** 
	 * Handles events generated by the mouse.
	 */
	@Override
	public void mouseClicked(MouseEvent me){
		if(me.getClickCount() == 2) viewProject.loadPanelCentral();
	}

	/** 
	 * Asks the user if the project must be saved before closing the application.
	 */
	@Override
	public void windowClosing(WindowEvent we){
		if(modelProject.readStateProject()[1]){
			if(viewProject.saveProjectDialog() == 0){
			  if(modelProject.readStateProject()[0])
				modelProject.deleteProject();
			}
			else modelProject.saveProject();
		}
      	closeToolInstance();
	}
	
	@Override
	public void windowActivated(WindowEvent arg0) 
	{}
	
	@Override
	public void windowClosed(WindowEvent arg0) 
	{}

	@Override
	public void windowDeactivated(WindowEvent arg0) 
	{}

	@Override
	public void windowDeiconified(WindowEvent arg0) 
	{}

	@Override
	public void windowIconified(WindowEvent arg0) 
	{}

	@Override
	public void windowOpened(WindowEvent arg0) 
	{}

	@Override
	public void mouseEntered(MouseEvent arg0) 
	{}

	@Override
	public void mouseExited(MouseEvent arg0) 
	{}

	@Override
	public void mousePressed(MouseEvent arg0) 
	{}

	@Override
	public void mouseReleased(MouseEvent arg0) 
	{}

	/**
	 * Returns the project name.
	 * 
	 * @return - a String representing the project name
	 */
	public String getProjectName(){
	  return projectName;
	}
		
	/**
	 * Sets the project name.
	 * NOTE: This method should be called anytime the project name has to be set, 
	 * in order to update the tool's tray.
	 * 
	 * @param name - the new project name
	 */
	public void setProjectNameAndTray(String name){
		if(!TrayUtils.isCMTInstancePresent(projectName)){
		  this.projectName=name;
		  TrayUtils.createAndShowCMTTray(this);
		}
		else{
		  TrayUtils.updateInstanceCMT(projectName, name);
		  this.projectName=name;			
		}		
	}
	
	/**
	 * Brings this instance root frame to front.
	 */
	public void bringToFront(){
//	  viewProject.minimize();
//	  viewProject.maximize();
	  viewProject.bringToFront();

	}
}

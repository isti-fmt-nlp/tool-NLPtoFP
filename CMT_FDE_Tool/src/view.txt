/**
 * 
 * @author Daniele Cicciarella
 *
 */
package view;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Rectangle;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;

public class ViewProject implements Observer, Runnable
{
	private ModelProject modelProject = null;
	
	private ControllerProject controllerProject = null;
	
	private JFrame frameProject = new JFrame("Commonality Mining Tool");
	
	private JMenuBar menu = new JMenuBar();
	
	private JMenu menuProject;
	
	private JMenuItem menuProjectC, menuProjectD, 
					  menuProjectL, menuProjectS,
					  menuProjectE;
	
	private JButton buttonProjectCP, buttonProjectSP,
					buttonProjectLF, buttonProjectEC;
	
	private JPopupMenu menuTreeProject = null;
	
	private JMenuItem menuTree = null;
	
	private Thread throbber = new Thread(this);
	
	private boolean stateThrobber = false;
	
	private JButton buttonCommonalitiesEnd;
	
	private ViewPanelLateral panelLateralProject = null;
	
	private ViewPanelCentral panelCentralProject = null; 
	
	/** Costruttore
	 * 
	 * @param modelProject
	 */
	public ViewProject(ModelProject modelProject)
	{
		this.modelProject = modelProject;
		
		/* Creazione JFrame */
		frameProject.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frameProject.setExtendedState(JFrame.MAXIMIZED_BOTH);
		frameProject.setLocationRelativeTo(null);
		frameProject.setLayout(null);		
		frameProject.setJMenuBar(menu);
	}
	
	/** Thread: Gestisce la funzionalit� del throbber
	 * 
	 */
	@Override
	public void run() 
	{
		JLabel jl1 = new JLabel("A few minutes the analysis ends...");
		jl1.setBounds(new Rectangle(20,10,250,30));
		
		ImageIcon i = new ImageIcon("./src/DATA/Throbber/throbber.gif");
		
		JLabel jl2  = new JLabel();
		jl2.setBounds(new Rectangle(270,10,35,35));
		jl2.setIcon(i);		
		
		JFrame jf = new JFrame("Extraction Commonalities in progress...");
		jf.setLayout(null);
		jf.setBackground(Color.WHITE);
		jf.setBounds(550, 375, 350, 80);
		jf.add(jl1);
		jf.add(jl2);
		jf.setVisible(true);
		
		while(!stateThrobber)
			jf.repaint();
		
		jf.setVisible(false);
		jf.dispose();
	}
	
	/** Setta lo stato del throbber
	 * 
	 * @param b
	 */
	private void setStateThrobber(boolean b)
	{
		stateThrobber = b; 
	}
	
	/** Crea ed inizializza le strutture della GUI, aggiungendo ad ognuno di esse come ascoltare degli eventi il controllore 
	 * 
	 * @param controllerProject controllore
	 */
	public void addListener(ControllerProject controllerProject) 
	{
		this.controllerProject = controllerProject;
		
		/* Creazione MenuBar */
		menuProjectC = new JMenuItem("Create Project");
		menuProjectC.addActionListener(controllerProject);
		
		menuProjectD = new JMenuItem("Delete Project");
		menuProjectD.addActionListener(controllerProject);
		menuProjectD.setEnabled(false);
		
		menuProjectL = new JMenuItem("Load Project");
		menuProjectL.addActionListener(controllerProject);
		
		menuProjectS = new JMenuItem("Save Project");
		menuProjectS.addActionListener(controllerProject);
		menuProjectS.setEnabled(false);
		
		menuProjectE = new JMenuItem("Exit");
		menuProjectE.addActionListener(controllerProject);	
		
		menuProject = new JMenu("Project");
		menuProject.add(menuProjectC);
		menuProject.add(menuProjectD);
		menuProject.addSeparator();
		menuProject.add(menuProjectL);		
		menuProject.add(menuProjectS);
		menuProject.addSeparator();
		menuProject.add(menuProjectE);
		
		menu.add(menuProject);
		
		/* Creazione Bottoni */
		buttonProjectCP = new JButton("Create Project");
		buttonProjectCP.addActionListener(controllerProject);
		buttonProjectCP.setBounds(new Rectangle(10,10,105,50));
		
		buttonProjectSP = new JButton("Save Project");
		buttonProjectSP.addActionListener(controllerProject);
		buttonProjectSP.setBounds(new Rectangle(160,10,105,50));
		buttonProjectSP.setEnabled(false);
		
		buttonProjectLF = new JButton("Load File");
		buttonProjectLF.addActionListener(controllerProject);
		buttonProjectLF.setBounds(new Rectangle(310,10,105,50));
		buttonProjectLF.setEnabled(false);
		
		buttonProjectEC = new JButton("Extract Commonality");
		buttonProjectEC.addActionListener(controllerProject);
		buttonProjectEC.setBounds(new Rectangle(460,10,165,50));
		buttonProjectEC.setEnabled(false);
		
		frameProject.add(buttonProjectCP);
		frameProject.add(buttonProjectSP);
		frameProject.add(buttonProjectLF);
		frameProject.add(buttonProjectEC);
		
		
		menuTree = new JMenuItem("Delete File");
		menuTree.addActionListener(controllerProject);
		
		menuTreeProject = new JPopupMenu("Men� Tree");
		menuTreeProject.add(menuTree);
		
		/* Creazione pannello laterale */
		panelLateralProject = new ViewPanelLateral(menuTreeProject);

		buttonCommonalitiesEnd = new JButton("OK");
		buttonCommonalitiesEnd.setBounds(430, 530, 80, 30);
		buttonCommonalitiesEnd.addActionListener(controllerProject);
		
		/* Creazione pannello centrale */
		panelCentralProject = new ViewPanelCentral(buttonCommonalitiesEnd);
		
		frameProject.addWindowListener(controllerProject);
		frameProject.setVisible(true);
	}
	
	/** Gestisce gli eventi di notifica inviati da viewProject
	 * 
	 */
	@Override
	public void update(Observable os, Object o) 
	{
		if(o.equals("End Extract Commonalities"))
		{
			frameProject.setEnabled(true);
			setStateThrobber(true);
			buttonProjectEC.setEnabled(false);
			panelLateralProject.setAnalysisLeafTree();	
			
			File f = new File("./src/DATA/Sound/analysis.wav");
		    AudioInputStream ais;
			try 
			{
				ais = AudioSystem.getAudioInputStream(f);
				
			    DataLine.Info info = new DataLine.Info(Clip.class, ais.getFormat());
			    
			    Clip clip = (Clip) AudioSystem.getLine(info);
			    clip.open(ais);
			    clip.start();
			} 
			catch (UnsupportedAudioFileException ex) 
			{
				System.out.println("Exception update: " + ex.getMessage());
	            return;
			} 
			catch (IOException ex) 
			{
				System.out.println("Exception update: " + ex.getMessage());
	            return;
			} 
			catch (LineUnavailableException ex) 
			{
				System.out.println("Exception update: " + ex.getMessage());
	            return;
			}		    
		}
		else if(o.equals("End Commonalities Selected"))
		{
			panelCentralProject.refreshTabCommonalitesSelected(
					modelProject.readPathCommonalitiesSelectedHTML());
			frameProject.remove(panelCentralProject.getPanelAnalysis());
			frameProject.add(panelCentralProject.getPanelAnalysis());	
		}
		frameProject.repaint(); 	
	}
	
	/** Assegna un nome al progetto
	 * 
	 * @return s stringa contenente il nome del progetto
	 */
	public String assignNameProjectDialog()
	{				
			String s = null;
			
		 	JTextField jtf = new JTextField();
		 	
		    Object[] o1 = {"Name project: ", jtf};


		    Object[] o2 = { "Cancel", "OK" };
		    
		    int i = JOptionPane.showOptionDialog(new JFrame("Create Project"),
		            o1, "",
		            JOptionPane.YES_NO_OPTION, JOptionPane.DEFAULT_OPTION, null,
		            o2, o2[1]);
		    
		    if(i == JOptionPane.NO_OPTION)
		    {
		    	if((s = jtf.getText()) != null)
		    	{
		    		if(!s.trim().equals(""))
		    		{
				    	return s;
		    		}
		    		else
		    		{
		    			errorDialog("You did not put a name to the project");
		    			return null;
		    		}
		    	}
		    	else
		    	{
		    		errorDialog("You did not put a name to the project");
	    			return null;
		    	}
		    }		    		      
		    else
		    	return null;
	}
	
	/** Cancella il progetto
	 * 
	 */
	public void deleteProjectDialog()
	{
		JFrame f = new JFrame("Delete Project");
		
    	Object[] options = {"No","Yes"};			
		
		int i = JOptionPane.showOptionDialog(
				f, "Do you want delete the project?", "Delete Project", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[1]);
		
		if(i == 1)
		{
			modelProject.deleteProject();
			frameProject.remove(panelLateralProject.getPanelTree());
			frameProject.remove(panelCentralProject.getPanelAnalysis());
			panelLateralProject = new ViewPanelLateral(menuTreeProject);
			panelCentralProject = new ViewPanelCentral(buttonCommonalitiesEnd);
			frameProject.repaint();
		}
		
		frameProject.repaint();
	}
	
	/** Carica un progetto
	 * 
	 * @return s path del file contenente il progetto da caricare
	 */
	public String loadProjectDialog()
	{
		FileDialog d = new FileDialog(new JFrame("Load File"));
    	d.setMode(FileDialog.LOAD);
    	d.setFilenameFilter(new FilterFileProject());
	    d.setDirectory(".");
	    d.setVisible(true);
	    
	    if(d.getFile() == null)
	    	return null;
	    
	    if(!buttonProjectEC.isEnabled())
    		buttonProjectEC.setEnabled(true);

	    return d.getFile().toString();
	}
	
	/** Salva il progetto
	 * 
	 *  @return 1 se l'utente vuole salvare il progetto
	 *  @return 0 altrimenti
	 */
	public int saveProjectDialog()
	{
		JFrame f = new JFrame("Save Project");
		
    	Object[] options = {"No","Yes"};			
		
		int i = JOptionPane.showOptionDialog(
				f, "Do you want save the project?", "Save Project", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[1]);
		
		if(i == 1)
			return 1;
		
		else
			return 0;
	}
	
	/** Carica un file nel progetto
	 * 
	 * @return s[2] array di stringhe contenente rispettivamente il nome del file e la path
	 * 			    del file
	 */
	public String [] loadFileDialog()
	{
		String [] s = new String[2];
		
		FileDialog d = new FileDialog(new JFrame("Load File"));
    	d.setMode(FileDialog.LOAD);
    	d.setFilenameFilter(new FilterFileInput());
	    d.setDirectory(".");
	    d.setVisible(true);
	    
	    if(d.getFile() == null)
	    	return null;
	    
	    s[0] = d.getFile().toString();
    	s[1] = d.getDirectory() + d.getFile().toString();
    	
    	if(!buttonProjectEC.isEnabled())
    		buttonProjectEC.setEnabled(true);
    	
    	if((panelLateralProject.addNodeInput(s[0])) == false)
    	{
    		errorDialog("The file" + s[0] + " has been inserted");
    		return null;
    	}
    	
    	frameProject.repaint();
      
	    return s;
	}
	
	/** Elimina un file dal progetto
	 *  
	 * @return i indice del file eliminato
	 */
	public int deleteFiledDialog()
	{
		JFrame f = new JFrame("Delete File");
		
    	Object[] options = {"No","Yes"};			
		
		int i = JOptionPane.showOptionDialog(
				f, "Do you want delete the file?", "Delete File", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[1]);
		
		if(i == 1)
		{
			if((i = panelLateralProject.deleteNodeInput()) != -1)
			{
				if(panelLateralProject.getAnalysisLeafTree().size() == 0)
					buttonProjectEC.setEnabled(false);
			}
			return i;
		}	
		return -1;
	}
	
	/** Estrae le Commonalities
	 * 
	 */
	public void extractCommonalitiesdDialog()
	{
		JFrame f = new JFrame("Extract Commonalities");
		
    	Object[] options = {"No","Yes"};			
		
		int i = JOptionPane.showOptionDialog(
				f, "Do you want extract commonalities from the file?", "Extract Commonalities", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[1]);
		
		if(i == 1)
		{
			modelProject.analyzesFileProject();
			setStateThrobber(false);
			throbber.start();
			frameProject.setEnabled(false);
			frameProject.repaint();
		}
	}
	
	/** Mostra l'errore commesso dall'utente
	 * 
	 * @param s stringa contenente l'errore commesso dall'utente
	 */
	public void errorDialog(String s)
	{
		JFrame f = new JFrame("Error");
		
    	Object[] options = {"OK"};			
		
		JOptionPane.showOptionDialog(
				f, s, "Error", JOptionPane.OK_OPTION, JOptionPane.NO_OPTION, null, options, options[0]);
	}
	
	/** Carica pannello laterale 
	 * 
	 * @param s Stringa contenente nome del progetto
	 */
	public void loadPanelLateral(String s, ArrayList <String> al)
	{
		if(al == null)
		{
			frameProject.remove(panelLateralProject.getPanelTree());
			frameProject.remove(panelCentralProject.getPanelAnalysis());
			
			panelLateralProject = new ViewPanelLateral(menuTreeProject);
			
			panelCentralProject = new ViewPanelCentral(buttonCommonalitiesEnd);
			
			panelLateralProject.createTree(s);
	    	panelLateralProject.getTree().addMouseListener(controllerProject);
	    	buttonProjectSP.setEnabled(true);
	    	buttonProjectLF.setEnabled(true);
	    	menuProjectD.setEnabled(true);
	    	menuProjectS.setEnabled(true);
	    	frameProject.add(panelLateralProject.getPanelTree());	    	
	    	frameProject.repaint();   
		}
		else
		{
			frameProject.remove(panelLateralProject.getPanelTree());
			frameProject.remove(panelCentralProject.getPanelAnalysis());   
			
			panelLateralProject = new ViewPanelLateral(menuTreeProject);
			
			panelCentralProject = new ViewPanelCentral(buttonCommonalitiesEnd);
		
			panelLateralProject.loadTree(s, al);
	    	panelLateralProject.getTree().addMouseListener(controllerProject);
	    	panelLateralProject.setAnalysisLeafTree(
	    			modelProject.loadAnalysisFileProject());
	    	buttonProjectSP.setEnabled(true);
	    	buttonProjectLF.setEnabled(true);
	    	menuProjectD.setEnabled(true);
	    	menuProjectS.setEnabled(true);	    		
	    	frameProject.add(panelLateralProject.getPanelTree());	    	
	    	frameProject.repaint();   	    	
		}
	}
	
	/** Carica pannello centrale 
	 * 
	 */
	public void loadPanelCentral()
	{
		int i = -1;
		
		if((i = panelLateralProject.getAnalysisLeaf()) != -1)
		{
			if(i >= 0)
			{
				panelCentralProject.createTabFile(
						modelProject.readAnalysisFile(i), modelProject.readTermRelevantFile(i));
				frameProject.remove(panelCentralProject.getPanelAnalysis());
				frameProject.add(panelCentralProject.getPanelAnalysis());
				frameProject.repaint();
			}
			else
			{
				panelCentralProject.createTabCommonalities(
						modelProject.readPathHTMLTermRelevantFile(), modelProject.readCommonalitiesCandidates(), modelProject.readCommonalitiesSelected(), modelProject.readPathCommonalitiesSelectedHTML());
				frameProject.remove(panelCentralProject.getPanelAnalysis());
				frameProject.add(panelCentralProject.getPanelAnalysis());
				frameProject.repaint();
			}
		}
	}

	/** Mostra le commonalities selezionate
	 * 
	 */
	public void showCommonalitiesSelected()
	{
		modelProject.setCommonalitiesSelected(
				panelCentralProject.getNameCheckBoxCommonalities());
	}
	
	/** Chiude il progetto
	 * 
	 */
	public void closeProject() 
	{
		frameProject.dispose();
		System.exit(0);
	}

	/** Assegna il filtro ai file di Input*/
	class FilterFileInput implements FilenameFilter 
	{
		@Override
		public boolean accept(File dir, String name) 
		{
			return name.endsWith( ".pdf" ) || name.endsWith(".txt");
	    }
	}
	
	/** Assegna il filtro ai file del progetto*/
	class FilterFileProject implements FilenameFilter 
	{
		@Override
		public boolean accept(File dir, String name) 
		{
			return name.endsWith( ".xml" );
	    }
	}
}
